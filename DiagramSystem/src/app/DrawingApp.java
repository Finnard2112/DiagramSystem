package app;

import java.util.Random;

public class DrawingApp {
	/*
	 * For every method remove the line with "throw ..." and implement the method.
	 * We are using "throw..." so your code does not display any compilation errors
	 * when you import the zip file. Also, if you don't implement a method you will
	 * see a white square (instead of green) in the submit server
	 */

	// getRectangle: this method generates a text rectangle by adding the provided
	// symbol when looping over each row then each column.

	public static String getRectangle(int maxRows, int maxCols, char symbol) {
		if (maxRows < 1 || maxCols < 1) {
			return null;
		}
		StringBuffer buffer = new StringBuffer();
		for (int row = 1; row <= maxRows; row++) {
			for (int col = 1; col <= maxCols; col++) {
				buffer.append(symbol);
			}
			if (row < maxRows) {
				buffer.append('\n');
			}
		}
		return buffer.toString();
	}

	// the getFlag method uses two loops that calls flagBarGenerator which generates
	// each line of the flag
	// and append them. There are two loops to create two halves of the flag, and
	// the second half of
	// the flag must be looped with the row variable starting from the middle row
	// going down
	// because flagBarGenerator depends on it.

	public static String getFlag(int size, char color1, char color2, char color3) {
		StringBuffer flag = new StringBuffer();
		int maxRows = size * 2;
		int maxCols = size * 5;

		if (size < 3) {
			return null;
		}
		for (int row = 1; row <= maxRows / 2; row++) {
			flag.append(flagBarGenerator(row, maxRows, maxCols, color1, color2, color3));
			flag.append('\n');
		}
		for (int row = maxRows / 2; row >= 1; row--) {
			flag.append(flagBarGenerator(row, maxRows, maxCols, color1, color2, color3));
			if (row > 1) {
				flag.append('\n');
			}
		}
		return flag.toString();
	}

	// the flagBarGenerator method is a method I created that takes the variables
	// in getFlag to return String lines of the flag.

	private static String flagBarGenerator(int row, int maxRows, int maxCols, char color1, char color2, char color3) {

		StringBuffer halfFlag = new StringBuffer();

		// generate the triangle part of each line using row as upper limit

		for (int triangleCol = 1; triangleCol <= row; triangleCol++) {
			halfFlag.append(color1);
		}

		// use color2 symbol for the non-triangle part of the flag on the 1st and
		// middle row.
		if (row == 1 || row == maxRows / 2) {
			for (int i = 1; i <= maxCols - row; i++) {
				halfFlag.append(color2);
			}
		}

		// else use color 1.

		else {
			for (int i = 1; i <= maxCols - row; i++) {
				halfFlag.append(color3);
			}
		}
		return halfFlag.toString();
	}

	// getHorizontalBars returns a String that was appended with rectangles
	// generated by getRectangle with
	// varying colors depending on which horizontal bar it is. The color is changed
	// when the bar modulo 3 changes.

	public static String getHorizontalBars(int maxRows, int maxCols, int bars, char color1, char color2, char color3) {

		StringBuffer horizontalBars = new StringBuffer();
		int barSize = maxRows / bars;
		if (barSize < 1 || !(isValidColor(color1)) || !(isValidColor(color2)) || !(isValidColor(color3))) {
			return null;
		}
		for (int bar = 1; bar <= bars; bar++) {
			if (bar % 3 == 1) {
				horizontalBars.append(getRectangle(barSize, maxCols, color1));
			} else if (bar % 3 == 2) {
				horizontalBars.append(getRectangle(barSize, maxCols, color2));
			} else if (bar % 3 == 0) {
				horizontalBars.append(getRectangle(barSize, maxCols, color3));
			}

			if (bar < bars) {
				horizontalBars.append('\n');
			}
		}
		return horizontalBars.toString();
	}

	// getVerticalBars returns a string with varying vertical bars. It loops
	// over every column of the rectangle and changes color depending on the current
	// bar
	// it is looping over for every row of the rectangle. It appends these lines
	// and returns the rectangle string.

	public static String getVerticalBars(int maxRows, int maxCols, int bars, char color1, char color2, char color3) {

		StringBuffer verticalBars = new StringBuffer();
		int barSize = maxCols / bars;
		char temp = color1;
		if (barSize < 1 || !(isValidColor(color1)) || !(isValidColor(color2)) || !(isValidColor(color3))) {
			return null;
		}
		for (int row = 1; row <= maxRows; row++) {

			// barCount keeps the current bar number

			int barCount = 1;
			for (int col = 1; col <= maxCols; col++) {

				// Depending on the current bar number, the color of the bar changes
				// by barCount % 3.

				if (barCount % 3 == 1) {
					temp = color1;
				} else if (barCount % 3 == 2) {
					temp = color2;
				} else if (barCount % 3 == 0) {
					temp = color3;
				}
				verticalBars.append(temp);

				// notes the current bar number by adding one to barCount when the current col
				// being looped is divisible by the barSize, then makes it transitions to the next
				// bar)

				if (col % barSize == 0) {
					barCount++;
				}

				// If the current bar number exceeds specified bars, the loop
				// breaks.

				if (barCount > bars) {
					break;
				}
			}
			if (row < maxRows) {
				verticalBars.append('\n');
			}
		}
		return verticalBars.toString();
	}

	// getRandomColor returns a random value between R, G, B, Y, *, .

	public static char getRandomColor(Random random) {
		int randomNum = random.nextInt(6);
		if (randomNum == 0) {
			return 'R';
		} else if (randomNum == 1) {
			return 'G';
		} else if (randomNum == 2) {
			return 'B';
		} else if (randomNum == 3) {
			return 'Y';
		} else if (randomNum == 4) {
			return '*';
		} else if (randomNum == 5) {
			return '.';
		} else {
			return 'X';
		}

	}

	// isValidColor checks whether the argument is R, G, B, Y , 8, or .

	private static boolean isValidColor(char color) {
		char upperColor = Character.toUpperCase(color);
		if (upperColor == 'R' || upperColor == 'G' || upperColor == 'Y' || upperColor == 'B' || upperColor == '*'
				|| upperColor == '.') {
			return true;
		} else {
			return false;
		}
	}
}
